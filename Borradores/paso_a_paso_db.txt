Tareas del script 'script_creacion_inicial.sql' paso por paso, de acuerdo a lo que dice el enunciado:

0- (Cargar los datos de la tabla maestra en la base de datos, previo a ejecutar este script)

1- Hay que generar un nuevo esquema con el nombre del grupo, en mayúsculas y sin espacios.
	Un schema de sql server es parecido a un package en java o C#, o a un modulo en python. Un schema permite agrupar los objetos de la db de manera lógica. También permite asignar permisos a los usuarios para que sólo tengan accesos a determinados schemas. Más info en: 
		* http://stackoverflow.com/q/529142
		* http://stackoverflow.com/q/5323740
		* https://msdn.microsoft.com/en-US/library/ms190387.aspx

	1.1 - Antes que nada revisamos a ver si el schema ya existe, y en ese caso borramos todos los objetos(FKs, funciones, SPs, etc) del mismo antes de borrarlo. (http://stackoverflow.com/a/5323750)
	
	1.2 - Creamos el schema nuevamente.

2- Creamos las tablas dentro de nuestro esquema recientemente creado.

3- Agregamos las claves primarias y foráneas a las tablas.

4- Migramos los datos que se encuentran en la tabla maestra a nuestras tablas.
	Tabla SARASA.Pais:
		Ya tenemos datos de paises (ids y nombres), y hemos decidido que el id debe ser PK. Por motivos de compatibilidad con el sistema viejo, no vamos a cambiar los IDs asignados a los países existentes. Vamos a dar al sistema la habilidad de crear nuevos países, pero no vamos a darle la flexibilidad de elegir el ID para el mismo. Consideramos que no tiene sentido que el administrador que carga un país deba elegir un número de ID para el mismo sin que esté ya en uso. Es por ese motivo que usaremos un integer con identity(1,1), para que el motor maneje la generación de nuevas claves automáticamente. Esto nos obliga a activar IDENTITY INSERT para poder migrar los datos desde la tabla maestra, al menos durante la carga de esta tabla.

	Tabla SARASA.TipoDoc:
		Mismo criterio que para SARASA.Pais. Se pueden crear nuevos tipos de documento, pero el usuario administrador que los crea no tiene control sobre el id de ese nuevo tipo. La PK de esta tabla se genera automáticamente, es un integer con IDENTITY(1,1).


	Tabla SARASA.Cliente:
		La columna 'Cliente_habilitado', que indica si el cliente está o no habilitado para operar, comienza por defecto en 1 (habilitado). El otro estado posible es 0 (deshabilitado)

	Tabla SARASA.Tipocta:
		De acuerdo a varios comentarios por parte de los alumnos y los ayudantes en el grupo de google, la información del tipo de cuenta no está disponible en la tabla maestra ya que es una funcionalidad nueva y, por lo tanto, queda a criterio de cada grupo asignar los tipos de cuenta a las cuentas existentes.

		Independientemente de la decisión que tomemos con respecto a qué tipo vamos a asignarle a las cuentas existentes, hay que definir cómo vamos a caracterizar las cuentas 'gratuitas', ya que los otros tipos ('oro', 'plata' y 'bronce') comparten características similares con respecto a que los tres tienen costos asociados a transferencias, aperturas, cambios de categoría, etc. y sí tiene sentido que se inhabiliten.

		¿Por qué digo que tiene sentido que se inhabiliten? ¿Por qué no tendría sentido que una cuenta 'gratuita' esté en el estado 'inhabilitada'? Porque, según el enunciado, una cuenta 'inhabilitada' es aquella que "puede recibir dinero de otras cuentas, pero el cliente no puede realizar depósitos y/o retiro de dinero hasta que se le hayan facturado los costos por las transacciones realizadas y que aún no fueron rendidas" (página 9). Volviendo a citar al enunciado "Cada una de las categorías tiene asociado un costo [...] salvo la categoría gratuita, que no genera costo alguno" (página 9). Suponiendo entonces que inhabilitamos una cuenta gratuita, ¿en qué situación deja de estar inhabilitada?, si es imposible facturarle al no tener costos de transacción.

		Si asumimos entonces que es imposible inhabilitar una cuenta gratuita, entonces nos encontramos con una contradicción. Los tipos de cuenta tienen asociada una cantidad de días de suscripción que, una vez transcurridos, inhabilitan la cuenta. De acuerdo a lo dicho más arriba, este dato no figura en la tabla maestra y debe ser inventado por nosotros, pero ¿qué cantidad de días debe permanecer habilitada una cuenta gratuita? Dicho de otra manera, ¿cuándo vence la suscripción de una cuenta gratuita?

		Es por eso que, siendo un campo cuyo valor representa la cantidad de días de duración de una suscripción que nunca va a vencer (estamos hablando del caso de cuenta 'gratuita') parece lo más adecuado poner este valor en 2147483647 (el máximo disponible para el tipo de dato 'integer' en t-sql)

		El resto de los tipos de cuenta tendrán un valor para la columna tipocta_vencimiento_dias mayor a cero elegido de manera aleatoria.

		Los valores elegidos son:
			Para las cuentas de tipo GRATUITA
				- Costo de creación:			$0,00
				- Costo de modificación:		$0,00
				- Costo de transferencia:		$0,00
				- Vencimiento en dias: 			2147483647

			Para las cuentas de tipo BRONCE
				- Costo de creación:			$5,00
				- Costo de modificación:		$1,00
				- Costo de transferencia:		$3,00
				- Vencimiento en dias:			30

			Para las cuentas de tipo PLATA
				- Costo de creación:			$10,00
				- Costo de modificación:		$1,00
				- Costo de transferencia:		$2,00
				- Vencimiento en dias:			60

			Para las cuentas de tipo ORO
				- Costo de creación:			$15,00
				- Costo de modificación:		$1,00
				- Costo de transferencia:		$1,00
				- Vencimiento en dias:			90

		