Tareas del script 'script_creacion_inicial.sql' paso por paso, de acuerdo a lo que dice el enunciado:

0- (Cargar los datos de la tabla maestra en la base de datos, previo a ejecutar este script)

1- Hay que generar un nuevo esquema con el nombre del grupo, en mayúsculas y sin espacios.
	Un schema de sql server es parecido a un package en java o C#, o a un modulo en python. Un schema permite agrupar los objetos de la db de manera lógica. También permite asignar permisos a los usuarios para que sólo tengan accesos a determinados schemas. Más info en: 
		* http://stackoverflow.com/q/529142
		* http://stackoverflow.com/q/5323740
		* https://msdn.microsoft.com/en-US/library/ms190387.aspx

	1.1 - Antes que nada revisamos a ver si el schema ya existe, y en ese caso borramos todos los objetos(FKs, funciones, SPs, etc) del mismo antes de borrarlo. (http://stackoverflow.com/a/5323750)
	
	1.2 - Creamos el schema nuevamente.

2- Creamos las tablas dentro de nuestro esquema recientemente creado.

3- Agregamos las claves primarias y foráneas a las tablas.

4- Migramos los datos que se encuentran en la tabla maestra a nuestras tablas.
	Tabla SARASA.Pais:
		Ya tenemos datos de paises (ids y nombres), y hemos decidido que el id debe ser PK. Por motivos de compatibilidad con el sistema viejo, no vamos a cambiar los IDs asignados a los países existentes. Vamos a dar al sistema la habilidad de crear nuevos países, pero no vamos a darle la flexibilidad de elegir el ID para el mismo. Consideramos que no tiene sentido que el administrador que carga un país deba elegir un número de ID para el mismo sin que esté ya en uso. Es por ese motivo que usaremos un integer con identity(1,1), para que el motor maneje la generación de nuevas claves automáticamente. Esto nos obliga a activar IDENTITY INSERT para poder migrar los datos desde la tabla maestra, al menos durante la carga de esta tabla.

		Para completar esta tabla se utilizaron los países que se encuentran en la tabla maestra en forma de atributos de clientes y de cuentas. Si bien no necesariamente los clientes y las cuentas deben tener asociado el mismo país, los países de los clientes y de las cuentas comparten los mismos IDs para países iguales, por lo que los datos que conforman esta tabla son simplemente una unión de aquellos que corresponden a países asociados a cuentas con aquellos países asociados a clientes.

	Tabla SARASA.TipoDoc:
		Mismo criterio que para SARASA.Pais. Se pueden crear nuevos tipos de documento, pero el usuario administrador que los crea no tiene control sobre el id de ese nuevo tipo. La PK de esta tabla se genera automáticamente, es un integer con IDENTITY(1,1).

	Tabla SARASA.Cliente:
		La columna 'Cliente_habilitado', que indica si el cliente está o no habilitado para operar, comienza por defecto en 1 (habilitado). El otro estado posible es 0 (deshabilitado)

	Tabla SARASA.Tipocta:
		De acuerdo a varios comentarios por parte de los alumnos y los ayudantes en el grupo de google, la información del tipo de cuenta no está disponible en la tabla maestra ya que es una funcionalidad nueva y, por lo tanto, queda a criterio de cada grupo asignar los tipos de cuenta a las cuentas existentes.

		Independientemente de la decisión que tomemos con respecto a qué tipo vamos a asignarle a las cuentas existentes, hay que definir cómo vamos a caracterizar las cuentas 'gratuitas', ya que los otros tipos ('oro', 'plata' y 'bronce') comparten características similares con respecto a que los tres tienen costos asociados a transferencias, aperturas, cambios de categoría, etc. y sí tiene sentido que se inhabiliten.

		¿Por qué digo que tiene sentido que se inhabiliten? ¿Por qué no tendría sentido que una cuenta 'gratuita' esté en el estado 'inhabilitada'? Porque, según el enunciado, una cuenta 'inhabilitada' es aquella que "puede recibir dinero de otras cuentas, pero el cliente no puede realizar depósitos y/o retiro de dinero hasta que se le hayan facturado los costos por las transacciones realizadas y que aún no fueron rendidas" (página 9). Volviendo a citar al enunciado "Cada una de las categorías tiene asociado un costo [...] salvo la categoría gratuita, que no genera costo alguno" (página 9). Suponiendo entonces que inhabilitamos una cuenta gratuita, ¿en qué situación deja de estar inhabilitada?, si es imposible facturarle al no tener costos de transacción.

		Si asumimos entonces que es imposible inhabilitar una cuenta gratuita, entonces nos encontramos con una contradicción. Los tipos de cuenta tienen asociada una cantidad de días de suscripción que, una vez transcurridos, inhabilitan la cuenta. De acuerdo a lo dicho más arriba, este dato no figura en la tabla maestra y debe ser inventado por nosotros, pero ¿qué cantidad de días debe permanecer habilitada una cuenta gratuita? Dicho de otra manera, ¿cuándo vence la suscripción de una cuenta gratuita?

		Es por eso que, siendo un campo cuyo valor representa la cantidad de días de duración de una suscripción que nunca va a vencer (estamos hablando del caso de cuenta 'gratuita') parece lo más adecuado poner este valor en 2147483647 (el máximo disponible para el tipo de dato 'integer' en t-sql)

		El resto de los tipos de cuenta tendrán un valor para la columna 'tipocta_vencimiento_dias' mayor a cero elegido de manera aleatoria.

		Los valores elegidos son:
			Para las cuentas de tipo GRATUITA
				- Costo de creación:			$0,00
				- Costo de modificación:		$0,00
				- Costo de transferencia:		$0,00
				- Vencimiento en dias: 			2147483647

			Para las cuentas de tipo BRONCE
				- Costo de creación:			$5,00
				- Costo de modificación:		$1,00
				- Costo de transferencia:		$3,00
				- Vencimiento en dias:			30

			Para las cuentas de tipo PLATA
				- Costo de creación:			$10,00
				- Costo de modificación:		$1,00
				- Costo de transferencia:		$2,00
				- Vencimiento en dias:			60

			Para las cuentas de tipo ORO
				- Costo de creación:			$15,00
				- Costo de modificación:		$1,00
				- Costo de transferencia:		$1,00
				- Vencimiento en dias:			90

	Tabla SARASA.Cuenta:
		Usaremos como PK al valor del numero de cuenta. Asumimos que no hay valores duplicados, cada número de cuenta es único en el sistema.
		
		En un principio se evaluó la posibilidad de cargar todas las cuentas con el tipo 'gratuito'. Sin embargo, al analizar que a todas se les ha facturado en algún momento un costo por transferencia (lo que contradice la definición de cuenta de tipo gratuito) es más lógico asignarle un tipo que tenga gastos. Por lo tanto, al migrar los datos de las cuentas desde la tabla maestra, se le asignará por defecto el tipo ORO a cada una.

	Tabla. SARASA.Deposito:
		Usaremos como id el valor de la columna 'Deposito_Codigo' de la tabla maestra y lo incrementaremos de a 1. El código de ingreso (que debe ser distinto al de egreso y al de transacción) será el hash del valor de la clave del depósito con el algoritmo 'MD2' empleando la función HASHBYTES.

		El procedure SARASA.realizar_deposito recibe 6 parámetros:
			@cliente_id de tipo integer, es el id del cliente que realiza el depósito.
			@deposito_fecha de tipo datetime, la fecha en que se realiza el depósito.
			@deposito_importe de tipo numeric(18,2), el monto del depósito.
			@deposito_moneda_id de tipo integer, el id de la moneda en que se realiza el depósito.
			@deposito_tarjeta_num de tipo varchar(64), el numero de la tarjeta que realiza el depósito (es el hash cifrado en sha256)
			@deposito_cuenta_num de tipo numeric(18,0), el número de la cuenta a donde se depositarán los fondos.

	Tabla SARASA.Banco:
		Los datos de los bancos en la tabla maestra se distribuyen en 3 columnas, siendo estos datos el código del banco (columna banco_cogido, debe ser un error de tipeo), el nombre y la dirección.

		Vamos a utilizar como PK el código del banco, entonces durante la migración insertaremos el mismo en la tabla SARASA.Banco como PK.

	Tabla SARASA.Cheque:
		Entendemos que cuando el enunciado dice que hay que registrar en un cheque el 'nombre a quien se le libra', se refiere al nombre y apellido, que es lo que se necesita para emitir el cheque. En este campo hacemos un merge de Cliente.Cliente_Nombre y Cliente.Cliente_Apellido. 
		Vamos a usar como PK un numero entero que se autoincrementa comenzando a partir de 1.

		El procedure SARASA.emitir_cheque recibe 3 parámetros de entrada y 1 de salida:
				@cliente_id es de tipo integer,
				@banco_codigo es de tipo numeric(18,0),
				@importe es de tipo numeric(18,2),
				@cheque_id es un parámetro de salida y es de tipo numeric(18,0)

				Este procedure no se llama directamente, sino que se llama desde dentro del procedure SARASA.retirar_efectivo, ya que a la hora de hacer un retiro se debe generar un cheque. Como el id de cheque es necesario para registrar el retiro, cuando se invoca a emitir_cheque, también se le pasa un parámetro de salida que va a contener el valor del id del cheque recién creado.
				De esta manera se puede continuar con el registro del retiro de efectivo.

	Tabla SARASA.Retiro:
		Usaremos como id el valor de la columna 'Retiro_Codigo' de la tabla maestra y lo incrementaremos de a 1. El código de egreso (que debe ser distinto al de ingreso y al de transacción) será el hash del valor de la clave del retiro con el algoritmo 'MD4' empleando la función HASHBYTES.

	Tabla SARASA.Transferencia:
		Usaremos un valor entero autoincremental como PK.

	Tabla SARASA.Factura:
		Vamos a usar como PK el campo Factura_Numero.

	Tabla SARASA.Itemfact:
		Vamos a usar como PK un número entero que se autoincrementará.

	Tabla SARASA.Usuario:
		Vamos a usar como PK un número entero que se autoincrementará. Gustavo le puso al username un tipo nvarchar(12), lo cambio a 20 para tener más margen para generar los username distintos entre sí. Cambia también el tipo de dato para la password, que pasa de nvarchar(8) a nvarchar(64) ya que 64 es la longitud en bytes del hash producido por sha256. Mismo caso para el campo 'Usuario_Respuesta_Sec'. En ambos casos es responsabilidad de la aplicación generar el hash y enviarlo a la DB.
		Le cambio el nombre a la columna 'Usuario_Nombre' por 'Usuario_Username' para que esté de acuerdo a lo que indica el tp ("ABM de Usuario", pág. 7)

		El enunciado pide que se creen los usuarios para todos los clientes existentes. Agregamos al script de carga un listado con 165 usuarios con datos generados de forma aleatoria (usernames y passwords), que luego se asignarán a los clientes.

	Tabla SARASA.Rol:
		Vamos a usar como PK un número entero que se autoincrementará. Gustavo le puso a la columna 'Rol_Descripcion' un tipo nvarchar(20), y no veo ninguna restricción a ese valor en el tp, así que se mantiene. Le cambio el nombre a la columna 'Rol_Habilitado' por 'Rol_Activo' para que esté de acuerdo a lo que indica el tp ("ABM de Rol", pág. 5)

		La carga inicial de esta tabla incluye un rol 'Administrador' con id 1, y un rol 'Cliente' con id 2

		El procedure SARASA.crear_rol recibe tres parámetros:
				@rol_desc de tipo varchar(20), es el nombre del rol.
				@rol_estado de tipo	bit, es el estado del rol (1: Activo, 0: No activo)
				@funciones_asociadas es un varchar(200) que contiene números separados por comas, por ejemplo: "1,2,6,34,22" donde cada número es el id de la función que se quiere asociar a éste rol. Estos valores deben representar funciones existentes en la tabla SARASA.Funcion, de otra manera se generará un error al querer crear el rol.

		El procedure SARASA.modificar_rol recibe 4 parametros:
				@rol_id de tipo int, que es el id del rol a modificar.
				@rol_desc de tipo varchar(20), es el nuevo nombre que se le quiere dar al rol.
				@rol_estado de tipo	bit, es el estado en el que se quiere setear el rol (1: Activo, 0: No activo)
				@funciones_asociadas es un varchar(200) que contiene números separados por comas, por ejemplo: "1,2,6,34,22" donde cada número es el id de la función que se quiere asociar a éste rol. Estos valores deben representar funciones existentes en la tabla SARASA.Funcion, de otra manera se generará un error al querer crear el rol.

	Tabla SARASA.Rol_x_Usuario:
		La PK de este mapeo será compuesta entre Rol_Id y Usuario_Id.

	Tabla SARASA.Funcion:
		Vamos a usar como PK un número entero que se autoincrementará. Gustavo le puso a la columna 'Funcion_Descripcion' un tipo nvarchar(20), y no veo ninguna restricción a ese valor en el tp, así que se mantiene.

	Tabla SARASA.Rol_x_Funcion:
		La PK de este mapeo será compuesta entre Rol_Id y Funcion_Id. 
